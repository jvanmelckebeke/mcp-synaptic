services:
  mcp-synaptic:
    build: .
    container_name: mcp-synaptic
    env_file:
      - ./envs/synaptic.env
    volumes:
      - ./data/synaptic:/app/data
      - ./logs/synaptic:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - synaptic-network
      - housekeeping
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synaptic.rule=Host(`synaptic.localhost`)"
      - "traefik.http.routers.synaptic.entrypoints=web"
      - "traefik.http.services.synaptic.loadbalancer.server.port=8000"

  redis:
    image: redis:7-alpine
    container_name: mcp-synaptic-redis
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - ./data/redis:/data
    networks:
      - synaptic-network
      - housekeeping
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Redis Web UI for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcp-synaptic-redis-ui
    env_file:
      - ./envs/redis.env
    depends_on:
      - redis
    networks:
      - synaptic-network
      - housekeeping
    restart: unless-stopped
    profiles:
      - dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`redis.synaptic.localhost`)"
      - "traefik.http.routers.redis-commander.entrypoints=web"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"


networks:
  synaptic-network:
    driver: bridge
  housekeeping:
    external: true