version: '3.8'

services:
  mcp-synaptic:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: mcp-synaptic-dev
    env_file:
      - ./envs/synaptic.dev.env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./mcp_synaptic:/app/mcp_synaptic:ro  # Mount source for development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - synaptic-network
    restart: unless-stopped
    command: ["uv", "run", "mcp-synaptic", "server", "--host", "0.0.0.0", "--port", "8000", "--debug"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.synaptic-dev.rule=Host(`synaptic.localhost`)"
      - "traefik.http.routers.synaptic-dev.entrypoints=web"
      - "traefik.http.services.synaptic-dev.loadbalancer.server.port=8000"
      - "traefik.docker.network=synaptic-network"

  redis:
    image: redis:7-alpine
    container_name: mcp-synaptic-redis-dev
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis-data-dev:/data
    networks:
      - synaptic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcp-synaptic-redis-ui-dev
    env_file:
      - ./envs/redis.env
    depends_on:
      - redis
    networks:
      - synaptic-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander-dev.rule=Host(`redis.synaptic.localhost`)"
      - "traefik.http.routers.redis-commander-dev.entrypoints=web"
      - "traefik.http.services.redis-commander-dev.loadbalancer.server.port=8081"
      - "traefik.docker.network=synaptic-network"

volumes:
  redis-data-dev:
    driver: local

networks:
  synaptic-network:
    driver: bridge