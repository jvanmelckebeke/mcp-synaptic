[project]
name = "mcp-synaptic"
version = "0.1.0"
description = "MCP server with local RAG database and expiring memory capabilities"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "MCP Synaptic Team"}
]
license = {text = "MIT"}
keywords = ["mcp", "rag", "memory", "vector-database", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # MCP Protocol with FastMCP support
    "mcp[cli]>=1.6.0",
    "fastmcp>=2.3.2",
    
    # Web framework and server (minimal for FastMCP)
    "starlette>=0.27.0", 
    "uvicorn[standard]>=0.24.0",
    
    # Vector database and embeddings
    "chromadb>=0.4.0",
    "numpy>=1.24.0",
    "aiohttp>=3.9.0",
    
    # Data validation and serialization
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Async and I/O
    "aiofiles>=23.0.0",
    "asyncio-throttle>=1.0.0",
    
    # Database and caching
    "aiosqlite>=0.19.0",
    "redis[hiredis]>=5.0.0",
    
    # Configuration and environment
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    
    # Logging and monitoring
    "structlog>=23.1.0",
    "rich>=13.0.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "croniter>=1.4.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0"
]
local-embeddings = [
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0"
]

[project.scripts]
mcp-synaptic = "mcp_synaptic.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["mcp_synaptic"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --cov=mcp_synaptic --cov-report=term-missing --timeout=30"

[tool.coverage.run]
source = ["mcp_synaptic"]
omit = ["tests/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\(.*Protocol\\):",
    "@(abc.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.16.0",
]
