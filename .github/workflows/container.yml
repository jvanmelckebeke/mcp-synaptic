name: Container Build & Publish

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push images (bypass cache)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      json: ${{ steps.meta.outputs.json }}
    steps:
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags
            type=ref,event=branch
            type=ref,event=pr
            # Semantic versioning
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA-based tags for traceability
            type=sha,prefix={{branch}}-,format=short
          labels: |
            org.opencontainers.image.title=MCP Synaptic
            org.opencontainers.image.description=MCP server with RAG and memory capabilities
            org.opencontainers.image.vendor=MCP Synaptic Team
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.url=https://github.com/jvanmelckebeke/mcp-synaptic
            org.opencontainers.image.source=https://github.com/jvanmelckebeke/mcp-synaptic
            org.opencontainers.image.documentation=https://github.com/jvanmelckebeke/mcp-synaptic/blob/main/README.md

  build:
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: [lightweight]
        # TODO: Re-enable full variant once disk space issue is resolved (see issue #32)
        # variant: [lightweight, full]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Skip build context preparation for lightweight only

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-lightweight
            type=gha,scope=main-lightweight
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-lightweight
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  test:
    runs-on: ubuntu-latest
    needs: [metadata, build]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        variant: [lightweight]
    steps:
      - name: Test container functionality
        run: |
          # Test basic container startup and health
          docker run --rm --name test-${{ matrix.variant }} \
            -e SERVER_HOST=0.0.0.0 \
            -e SERVER_PORT=8000 \
            -e DEBUG=true \
            -e REDIS_ENABLED=false \
            -e EMBEDDING_PROVIDER=api \
            -e EMBEDDING_API_BASE=http://mock:4000 \
            --health-cmd="curl -f http://localhost:8000/health || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.head_ref }} \
            timeout 30s python -c "
              import mcp_synaptic
              from mcp_synaptic.config.settings import Settings
              print('✅ MCP Synaptic import successful')
              settings = Settings()
              print(f'✅ Settings loaded: {settings.SERVER_HOST}:{settings.SERVER_PORT}')
              print('✅ Container test passed')
            "

  cleanup:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'schedule' || github.event.inputs.force_push == 'true'
    permissions:
      packages: write
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'mcp-synaptic'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: false